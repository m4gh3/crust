/*
 * Copyright (C) 2021 m4gh3
 * 
 * This file is part of m4gpiler.
    m4gpiler is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    m4gpiler is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with m4gpiler.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "rrextab.hpp"

{:token_names:
	START:
	L_PAR:
	L_SEMICOLON:
	L_SUM:
	L_PROD:
	L_UNARY_MINUS:
	NUM:
	PAR:
	UNARY_MINUS:
	PROD:
	SUM:
	SEMICOLON
:}

struct lang_val
{
	int64_t prec_token;
	int value;
};


void lang_callbacks(int64_t reduce, match_shared_t &m, circ_buf_t<int64_t, 3 > &next_redbuf, void *&lval, void *&rval )
{
	m.redbuf->push_head(((lang_val *)lval)->prec_token);
	switch(reduce)
	{
		case L_PAR:
			{
				rval = new lang_val{START, 0};
			}
			break;
		case L_SEMICOLON:
			{
				std::cout << ((lang_val *)lval)->value << std::endl;
				rval = new lang_val{L_SEMICOLON, 0};
			}
			break;
		case L_SUM:
			{
				rval = new lang_val{L_SUM, 0};
			}
			break;
		case L_PROD:
			{
				rval = new lang_val{L_PROD, 0};
			}
			break;
		case L_UNARY_MINUS:
			{
				rval = new lang_val{L_UNARY_MINUS, 0};
			}
			break;
		case NUM:
			{
				((lang_val *)lval)->value = 0;
				int *retval = &(((lang_val *)lval)->value);
				for(int i=0; i < m.ret[0]-m.offset; i++ )
					((*retval) *= 10)+=((*m.buf)[i]-'0');
			}
			break;
		case PAR:
			{
				((lang_val *)lval)->value = ((lang_val *)rval)->value;
			}
			break;
		case UNARY_MINUS:
			{
				((lang_val *)lval)->value = - ((lang_val *)rval)->value;
				delete (lang_val *)rval;
			}
			break;
		case PROD:
			{
				((lang_val *)lval)->value *= ((lang_val *)rval)->value;
				delete (lang_val *)rval;
			}
			break;
		case SUM:
			{
				((lang_val *)lval)->value += ((lang_val *)rval)->value;
				delete (lang_val *)rval;
			}
			break;
		case SEMICOLON:
			{
				((lang_val *)lval)->value = ((lang_val *)rval)->value;
				delete ((lang_val *)rval);
			}
	}
}

int main()
{
	{:parser_rules:
		START,L_UNARY_MINUS '0','9' -> NUM|DO_CALLBACK
		NUM|DO_CALLBACK '0','9' -> NUM|DO_CALLBACK

		START,L_PROD '-' -> L_UNARY_MINUS|DO_RECURSION|DO_CALLBACK
		START,L_PROD L_UNARY_MINUS NUM,PAR -> UNARY_MINUS|DO_CALLBACK

		START,L_PROD '(' -> L_PAR|DO_CALLBACK|DO_RECURSION
		START,L_PROD L_PAR NUM,SEMICOLON ')' -> PAR|DO_CALLBACK

		START,L_PROD '{' -> L_PAR|DO_CALLBACK|DO_RECURSION
		START,L_PROD L_PAR NUM,SEMICOLON '}' -> PAR|DO_CALLBACK

		START NUM,SEMICOLON ';' -> L_SEMICOLON|DO_CALLBACK|DO_RECURSION
		START L_SEMICOLON NUM,SUM -> SEMICOLON|DO_CALLBACK

		START,L_SEMICOLON NUM,SUM '+' -> L_SUM|DO_CALLBACK|DO_RECURSION
		START,L_SEMICOLON L_SUM NUM,PROD -> SUM|DO_CALLBACK

		START,L_SUM NUM,PROD '*' -> L_PROD|DO_CALLBACK|DO_RECURSION
		START,L_SUM L_PROD NUM,PAR -> PROD|DO_CALLBACK
	:}
	std::cout << "rrex_tree sz:" << rrex_tree_size(rrex_main_tree_ptr) << std::endl;
	std::cout << "START = " << START <<std::endl;
	int64_t ret[3]={0,-1};
	circ_buf_t<int64_t, 3 > redbuf; redbuf.push_head(START);
	match(rrex_main_tree_ptr, ret, matchbuf, redbuf, new lang_val{START, 0}, std::cin, std::cout );
	std::cout << std::endl;
	return 0;
}

// vim:ft=cpp
